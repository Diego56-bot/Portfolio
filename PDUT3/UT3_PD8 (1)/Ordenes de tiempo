
    String nombre; --- O(1)
        LinkedList<String> sucursales = new LinkedList<>();----O(1)
        public EstructurasYAlgoritmos(String nombre) {-----O(1)
            this.nombre = nombre;-------(01)
        }
        public String getNombre() {-----O(1)
            return nombre;------O(1)
        }
        public void AgregarSucursal(String nombre) {-----O(1)
            if (!sucursales.contains(nombre)) {-----O(N)
                sucursales.add(nombre);------O(N)
            }

        }
        public void QuitarSucursal(String nombre) {-------O(1)
            if (sucursales.contains(nombre)) {------O(N)
                sucursales.remove(nombre);------O(N)
            }

        }
        public void ListarSucursales() {----O(1)
            for (int i = 0; i < sucursales.size(); i++) {-----O(N)
                System.out.println(sucursales.get(i));-----O(1)
            }
        }
        public void CantidadDeSucursales() {----0(1)
            System.out.println("La cantidad de sucursales son: "+sucursales.size());-----O(1)
        }
        public void isEmpty(){-----O(1)
            if (sucursales.isEmpty()){-----O(N)
                System.out.println("La cantidad de sucursales es vacia");----O(1)
            }
            else{
                System.out.println("La cantidad de sucursales no es vacia");----O(1)
            }
        }
    }

CONSTRUCTOR: O(1)
getNombre: O(1)
AgregarSucursal: O(N + N)= O(N)
QuitarSucursal: O(N + N)= O(N)
ListarSucursales: O(N)
CantidadDeSucursales: O(1)
isEmpty: O(N)

